{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//     if (action.type === \"increment\") {\n//       return { counter: state.counter + 1, showCounter: state.showCounter };\n//     }\n//     if (action.type === \"decrement\") {\n//       return { counter: state.counter - 1, showCounter: state.showCounter };\n//     }\n//     if (action.type === \"increaseby5\") {\n//       return {\n//         counter: state.counter + action.increaseValue,\n//         showCounter: state.showCounter,\n//       };\n//     }\n//     if (action.type === \"toggle\") {\n//       return {\n//         counter: state.counter,\n//         showCounter: !state.showCounter,\n//       };\n//     }\n//     return state;\n//   };\n//   const store = createStore(counterReducer);\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    counter: 0,\n    showCounter: true\n  },\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isauthenticated: false\n  },\n  reducers: {\n    login(state) {\n      state.isauthenticated = true;\n    },\n    logout(state) {\n      state.isauthenticated = false;\n    }\n  }\n});\n\n// below works if we have only one reducer\n// const store = createStore(counterSlice.reducer);\n\n// configureStore works if we have multiple reducers incase of big apps\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","counterSlice","name","initialState","counter","showCounter","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authSlice","isauthenticated","login","logout","store","reducer","counterActions","actions"],"sources":["C:/Users/srina/Downloads/LearnReact/React/Redux/React/01-starting-project/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\r\n//     if (action.type === \"increment\") {\r\n//       return { counter: state.counter + 1, showCounter: state.showCounter };\r\n//     }\r\n//     if (action.type === \"decrement\") {\r\n//       return { counter: state.counter - 1, showCounter: state.showCounter };\r\n//     }\r\n//     if (action.type === \"increaseby5\") {\r\n//       return {\r\n//         counter: state.counter + action.increaseValue,\r\n//         showCounter: state.showCounter,\r\n//       };\r\n//     }\r\n//     if (action.type === \"toggle\") {\r\n//       return {\r\n//         counter: state.counter,\r\n//         showCounter: !state.showCounter,\r\n//       };\r\n//     }\r\n//     return state;\r\n//   };\r\n//   const store = createStore(counterReducer);\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: { counter: 0, showCounter: true },\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: { isauthenticated: false },\r\n  reducers: {\r\n    login(state) {\r\n      state.isauthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isauthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n// below works if we have only one reducer\r\n// const store = createStore(counterSlice.reducer);\r\n\r\n// configureStore works if we have multiple reducers incase of big apps\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGF,WAAW,CAAC;EAC/BG,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IAAEC,OAAO,EAAE,CAAC;IAAEC,WAAW,EAAE;EAAK,CAAC;EAC/CC,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACJ,OAAO,EAAE;IACjB,CAAC;IACDK,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACJ,OAAO,EAAE;IACjB,CAAC;IACDM,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACJ,OAAO,GAAGI,KAAK,CAACJ,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACH,WAAW,GAAG,CAACG,KAAK,CAACH,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMS,SAAS,GAAGf,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IAAEY,eAAe,EAAE;EAAM,CAAC;EACxCT,QAAQ,EAAE;IACRU,KAAKA,CAACR,KAAK,EAAE;MACXA,KAAK,CAACO,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDE,MAAMA,CAACT,KAAK,EAAE;MACZA,KAAK,CAACO,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,MAAMG,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAElB,YAAY,CAACkB;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAElD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}