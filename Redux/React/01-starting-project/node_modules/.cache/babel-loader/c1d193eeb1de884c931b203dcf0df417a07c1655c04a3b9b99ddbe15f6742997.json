{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//     if (action.type === \"increment\") {\n//       return { counter: state.counter + 1, showCounter: state.showCounter };\n//     }\n//     if (action.type === \"decrement\") {\n//       return { counter: state.counter - 1, showCounter: state.showCounter };\n//     }\n//     if (action.type === \"increaseby5\") {\n//       return {\n//         counter: state.counter + action.increaseValue,\n//         showCounter: state.showCounter,\n//       };\n//     }\n//     if (action.type === \"toggle\") {\n//       return {\n//         counter: state.counter,\n//         showCounter: !state.showCounter,\n//       };\n//     }\n//     return state;\n//   };\n//   const store = createStore(counterReducer);\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    isAuthenticated: false\n  },\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// below works if we have only one reducer\n// const store = createStore(counterSlice.reducer);\n\n// configureStore works if we have multiple reducers incase of big apps\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","authSlice","name","initialState","isAuthenticated","reducers","login","state","logout","store","reducer","counter","counterSlice","auth","authActions","actions"],"sources":["C:/Users/srina/Downloads/LearnReact/React/Redux/React/01-starting-project/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\r\n//     if (action.type === \"increment\") {\r\n//       return { counter: state.counter + 1, showCounter: state.showCounter };\r\n//     }\r\n//     if (action.type === \"decrement\") {\r\n//       return { counter: state.counter - 1, showCounter: state.showCounter };\r\n//     }\r\n//     if (action.type === \"increaseby5\") {\r\n//       return {\r\n//         counter: state.counter + action.increaseValue,\r\n//         showCounter: state.showCounter,\r\n//       };\r\n//     }\r\n//     if (action.type === \"toggle\") {\r\n//       return {\r\n//         counter: state.counter,\r\n//         showCounter: !state.showCounter,\r\n//       };\r\n//     }\r\n//     return state;\r\n//   };\r\n//   const store = createStore(counterReducer);\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: { isAuthenticated: false },\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\n// below works if we have only one reducer\r\n// const store = createStore(counterSlice.reducer);\r\n\r\n// configureStore works if we have multiple reducers incase of big apps\r\nconst store = configureStore({\r\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n});\r\n\r\nexport const authActions = authSlice.actions;\r\n\r\nexport default store;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IAAEC,eAAe,EAAE;EAAM,CAAC;EACxCC,QAAQ,EAAE;IACRC,KAAKA,CAACC,KAAK,EAAE;MACXA,KAAK,CAACH,eAAe,GAAG,IAAI;IAC9B,CAAC;IACDI,MAAMA,CAACD,KAAK,EAAE;MACZA,KAAK,CAACH,eAAe,GAAG,KAAK;IAC/B;EACF;AACF,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,MAAMK,KAAK,GAAGT,cAAc,CAAC;EAC3BU,OAAO,EAAE;IAAEC,OAAO,EAAEC,YAAY,CAACF,OAAO;IAAEG,IAAI,EAAEZ,SAAS,CAACS;EAAQ;AACpE,CAAC,CAAC;AAEF,OAAO,MAAMI,WAAW,GAAGb,SAAS,CAACc,OAAO;AAE5C,eAAeN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}